/*! For license information please see ic-stoic-identity.js.LICENSE.txt */
!function webpackUniversalModuleDefinition(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ic-stoic-identity",[],t):"object"==typeof exports?exports["ic-stoic-identity"]=t():e["ic-stoic-identity"]=t()}(this,(function(){return(()=>{"use strict";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{StoicIdentity:()=>StoicIdentity});const n=require("@dfinity/agent"),i=require("@dfinity/identity"),o=require("@dfinity/principal"),r=require("buffer");window.Buffer=r.Buffer;const c=r.Buffer.from((new TextEncoder).encode("
ic-request"));let a="https://www.stoicwallet.com";class PublicKey{constructor(e,t){this._der=e,this._type=t}getType(){return this._type}toDer(){return Object.assign(this._der,{__derEncodedPublicKey__:void 0})}}class StoicIdentity extends n.SignIdentity{constructor(e,t){super(),this._principal=e,this._publicKey=t}static disconnect(){return function stoicLogout(){localStorage.removeItem(d),u="",s=void 0}()}static async connect(e){e&&(a=e);const t=await async function stoicLogin(e){return new Promise((async(t,n)=>{var i;const o=await async function generateDefaultKeys(){const e=await window.crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-384"},!0,["sign","verify"]);if(!e.privateKey||!e.publicKey)throw new Error("Failed to generate private/public key pair for stoic identity");const t=await window.crypto.subtle.exportKey("spki",e.publicKey);return{secretkey:await window.crypto.subtle.exportKey("jwk",e.privateKey),apikey:buf2hex(t)}}();u=o.apikey,f=null!==(i=window.open(e+"?authorizeApp","stoic"))&&void 0!==i?i:void 0,w={resolve:e=>{const n={...o,principal:e.principal,key:e.key,type:e.type};s=n,localStorage.setItem(d,JSON.stringify({...n,key:Array.from(n.key)})),t(n)},reject:n}}))}(a);return new StoicIdentity(o.Principal.fromText(t.principal),new PublicKey(t.key,t.type))}static async load(e,t=!1){e&&(a=e);const n=function stoicInit(){return s=function readStoredKeys(){var e;const t=null!==(e=localStorage.getItem(d))&&void 0!==e?e:void 0;if(!t)return;try{const e=JSON.parse(t);return{...e,key:new Uint8Array(e.key)}}catch(e){return void console.error("Failed to parse localStorage stoicApp data",e)}}(),s}();if(n){const e=new StoicIdentity(o.Principal.fromText(n.principal),new PublicKey(n.key,n.type));try{return t||await e.accounts(),e}catch(e){return void console.error(e)}}}getPublicKey(){return this._publicKey}async sign(e){return this.transport(buf2hex(e))}transport(e){if(s)return stoicSign("sign",e,this.getPrincipal().toText(),s);throw new Error("Can't transport data, Stoic app was not initialized yet.")}accounts(){if(s)return stoicSign("accounts","accounts",this.getPrincipal().toText(),s);throw new Error("Can't get accounts, stoic app was not initialized yet.")}transformRequest(e){return new Promise((async(t,o)=>{try{const{body:o,...a}=e,s=(0,n.requestIdOf)(o),u=this.getPublicKey(),d={...a,body:{content:o}},y=JSON.parse(String(await this.sign(r.Buffer.from(r.Buffer.concat([c,new Uint8Array(s)])))));if(d.body.sender_sig=function hex2buf(e){const t=new Uint8Array(e.length/2);for(let n=0;n<e.length;n+=2)t[n/2]=parseInt(e.substring(n,n+2),16);return t}(y.signed),"DelegationIdentity"==u.getType()){const e=i.DelegationChain.fromJSON(y.chain);d.body.sender_pubkey=e.publicKey,d.body.sender_delegation=e.delegations}else d.body.sender_pubkey=new Uint8Array(Object.values(u.toDer()));t(d)}catch(e){o(e)}}))}}let s,u="";const d="_scApp";let y=0;const l=[],p=[];let f,w;async function stoicSign(e,t,n,i){return new Promise((async function(o,r){const c=(new TextEncoder).encode(t),s=await window.crypto.subtle.importKey("jwk",i.secretkey,{name:"ECDSA",namedCurve:"P-384"},!0,["sign"]),u=buf2hex(await window.crypto.subtle.sign({name:"ECDSA",hash:{name:"SHA-384"}},s,c));!function postToIframe(e,t,n){const i=y;y+=1,l[i]={resolve:t,reject:n};const o=document.createElement("iframe");o.setAttribute("id","connect_iframe"+i),o.setAttribute("width","0"),o.setAttribute("height","0"),o.setAttribute("border","0"),document.body.appendChild(o),p[i]=o,o.addEventListener("load",(function(){if(e.listener=i,!o.contentWindow)throw new Error("iframe fired load event but it doesn't have a contentWindow yet.");o.contentWindow.postMessage(e,"*")})),o.setAttribute("src",a+"/?stoicTunnel")}({target:"STOIC-IFRAME",action:e,payload:t,principal:n,apikey:i.apikey,sig:u},o,r)}))}function buf2hex(e){return[...new Uint8Array(e)].map((e=>e.toString(16).padStart(2,"0"))).join("")}return window.addEventListener("message",(e=>{if(e&&e.origin==a){const t=e.data;if(function isAccountsData(e){return e&&"target"in e&&"STOIC-EXT"===e.target}(t)){const e=l[t.listener];if(!e)throw new Error(`No listener exists at index ${t.listener}`);null!=t.success&&t.success?e.resolve(t.data):e.reject(t.data),function removeFrame(e){const t=p[e];t&&t.remove()}(t.listener)}else if("initiateStoicConnect"==t.action){if(!f)throw new Error("Tried to post to Stoic window but one doesn't exist yet.");f.postMessage({action:"requestAuthorization",apikey:u},"*")}else"rejectAuthorization"==e.data.action?(null==w||w.reject("Authorization Rejected"),w=void 0,null==f||f.close()):"confirmAuthorization"==e.data.action&&(null==w||w.resolve(e.data),w=void 0,null==f||f.close())}}),!1),t})()}));
